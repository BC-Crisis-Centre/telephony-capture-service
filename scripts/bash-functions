#!/bin/bash

#######################################
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   == 0 => pg1 is ACTIVE; != 0 => pg1 is not ACTIVE
#######################################
is-pg1-active () {
	docker exec -it pg1 sh -c 'psql -c "select version();" -U postgres; exit $?;' &>/dev/null
	return $?
}

#######################################
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   == 0 => pg2 is ACTIVE; != 0 => pg2 is not ACTIVE
#######################################
is-pg2-active () {
	docker exec -it pg2 sh -c 'psql -c "select version();" -p 5433 -U postgres; exit $?;' &>/dev/null
	return $?
}

#######################################
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
pg-state () {
    
    if is-pg1-active; then
        local pg1_STATE='ACTIVE'
    elif container-exists pg1; then
        local pg1_STATE='STOPPED'
    else
        local pg1_STATE='GONE'
    fi;

    if is-pg2-active; then
        local pg2_STATE='ACTIVE'
    elif container-exists pg2; then
        local pg2_STATE='STOPPED'
    else
        local pg2_STATE='GONE'
    fi;

    msg 'pg1: '$pg1_STATE', pg2: '$pg2_STATE
}

msg () {
	echo "${PROGNAME}: ${1:-"Message Not Provided"}" 1>&2
}

change-pgdata-owner () {
    
    if [ $# != 2 ]; then func-err $FUNCNAME $LINENO 'Incorrect parameter count'; return 1; fi

    if ! docker exec -it barman sh -c 'chown -R '$1'.'$1' /'$2'_data; exit $?;'; then 
        func-err $FUNCNAME $LINENO 'PGDATA Ownership Change Failed';
        return 1
    fi
    return 0
}

change-pgdata-permissions () {

    if ! docker exec -it barman sh -c 'chmod -R 775 /'$1'_data; exit $?;' &> /dev/null; then 
        func-err $FUNCNAME $LINENO 'PGDATA Permissions Change Failed';
        return 1
    fi
    return 0
}

# Define the environment (DEV, QA, or PROD)
# If no parameter provided, then it is a request to display the current environment
tcsenv () {
    local USAGE='Usage: tcsenv [dev|qa|prod]'

    # exports for docker-compose
    export STORES_COMPOSE_ARGS=' -f docker-compose.yml -f env_STORES/docker-compose.yml -p stores '
    export DEV_COMPOSE_ARGS=' -f docker-compose.yml -f env_DEV/docker-compose.yml -p dev '
    export QA_COMPOSE_ARGS=' -f docker-compose.yml  -f env_QA/docker-compose.yml -p qa '
    export PROD_COMPOSE_ARGS=' -f docker-compose.yml -f env_PROD/docker-compose.yml -p prod '
    export BARMAN_HOME=/home/barman

    if [ "$#" == 0 ]; then
        echo $TCSENV
        return 0
    elif [ "$#" == 1 ]; then
        case "$1" in
            [dD][eE][vV])
                export COMPOSE_ARGS=$DEV_COMPOSE_ARGS
                export TCSENV=dev
                export TCSENV_LONG_FORM=Development
                export PS1='TCS '$TCSENV_LONG_FORM'@\t:\w$ '
                ;;
            [qQ][aA])
                export COMPOSE_ARGS=$QA_COMPOSE_ARGS
                export TCSENV=qa
                export TCSENV_LONG_FORM=QA
                export PS1='TCS '$TCSENV_LONG_FORM'@\t:\w$ '
                ;;
            [pP][rR][oO][dD])
                export COMPOSE_ARGS=$PROD_COMPOSE_ARGS
                export TCSENV=prod
                export TCSENV_LONG_FORM=Production
                export PS1='TCS '$TCSENV_LONG_FORM'@\t:\w$ '
                ;;
            *) echo $USAGE
                return 1
                ;;
        esac
        echo $TCSENV_LONG_FORM
        return 0
    else
        echo $USAGE
    fi
}

dev () {
    tcsenv dev;
}
qa () {
    tcsenv qa;
}
prod () {
    tcsenv prod;
}

# Ensure that a container is not restarted at boot time
disable-restart () {
    docker update --restart no $1 2>&1 >/dev/null
    return $? 
}

# Configure the container to auto restart in the case of a reboot
enable-restart () {
    
    docker update --restart unless-stopped $1 2>&1 >/dev/null || func-err $FUNCNAME $LINENO 'Unable to Reconfigure '$1' Container to Auto Restart'; return 1;
    return 0
}

alter-archive-command () {
        
    if [ $# != 0 ]; then func-err $FUNCNAME $LINENO 'Incorrect parameter count'; return 1; fi

    for i in {1..10}
    do
        sleep 2
        if ! docker exec -it pg1 sh -c 'psql -c "ALTER SYSTEM SET archive_command TO true;" -U postgres 2>&1 >/dev/null; exit $?;'; then 
            func-err $FUNCNAME $LINENO 'pg1 Failed to Alter archive_command';
            continue
        fi
        sleep 3
        if ! docker exec -it pg1 sh -c 'psql -c "SELECT pg_reload_conf();" -U postgres 2>&1 >/dev/null; exit $?;'; then 
            func-err $FUNCNAME $LINENO 'pg1 Failed to Reload Postgres';
            continue
        fi
        return 0
    done
    func-err $FUNCNAME $LINENO 'pg1 Unable to Alter archive_command';
    return 1
}

clean-exit () {
    trap '' EXIT; 
    exit 0;
}

enable-barman-backups () {

    echo -n $PROGNAME': Enable Backups ... '
    # Various steps to ensure that barman is backing up the ACTIVE pg
    
    # archive_command set 'true'
    alter-archive-command || return 1;

    # Any partly done streaming is useless - discard
    barman-clear-legacy-streaming || return 1;

    # Ensure the Postgres replication slot exists
    barman-create-slot || return 1;

    # Do a master reset on Barman
    barman-reset || return 1;

    # Kick streaming to life
    barman-cron; return 1;

    # Now do a final sanity check
    barman-check &>/dev/null || return 1;

    echo 'done'
    return 0
}

error-exit () {

	# Display error message and exit
	msg "${1:-"Unknown Error"}" 1>&2
    msg 'Aborted'
	exit 1
}

func-err () {
    msg 'Error in function: '$1', Line '$2': '"$3"
    return 0
}

barman-check () {
	
    if [ $# != 0 ]; then func-err $FUNCNAME $LINENO 'Incorrect parameter count'; return 1; fi

    for i in {1..10}
    do
        sleep 2
        if docker exec -it barman sh -c 'ps -ef | grep pg_receivexlog | grep -v grep; exit $?;' &> /dev/null; then
            echo 'Streaming Replication Active'
            return 0
        fi
    done

    # If barman configuration fails, report why
    docker exec -it barman sh -c 'barman check pg1; exit $?;'
    msg $1' Stream Replication Activation Failed';
    return 1
}

barman-create-slot () {

	docker exec -it barman sh -c 'barman receive-wal --create-slot pg1; exit $?;' &> /dev/null
    return 0
}

barman-cron () {

	docker exec -it barman sh -c 'barman cron 2>&1 >/dev/null; exit $?;';
    return $?
}

barman-recover-latest () {

    echo -n $PROGNAME': Backup (latest) Recovery to '$2' ... '

    # barman needs ownership of the pgdata area
    if ! change-pgdata-owner barman $2; then return 1; fi

    # Tweak unix permissions
    if ! change-pgdata-permissions $2; then return 1; fi

    # Use barman to recover the latest backup for the selected pg container
    if ! docker exec -it barman sh -c 'barman recover pg1 latest /pg1_data 2>&1 >/dev/null; exit $?;'; then
        func-err $FUNCNAME $LINENO 'Latest Recovery Failure';
        return 1
    else
        return 0
    fi

    # Ownership now passed to postgres
    if ! change-pgdata-owner postgres pg1; then return 1; fi
    
    echo 'done'
    return 0
}

barman-clear-legacy-streaming () {
    if ! docker exec -it barman sh -c 'rm -rf /var/lib/barman/pg1/streaming/*; exit $?;'; then
        func-err $FUNCNAME $LINENO 'Unable to clear legacy streaming';
        return 1
    fi
    return 0
}

barman-recover () {
    
    if [ "$#" != 2 ]; then func-err $FUNCNAME $LINENO 'Incorrect parameter count'; fi

    echo -n $PROGNAME': Backup Recovery to '$1' ... '

    # barman needs ownership of the pgdata area
    if ! change-pgdata-owner barman $1; then return 1; fi

    # Tweak unix permissions
    if ! change-pgdata-permissions $1; then return 1; fi

    # Do the recovery
    if ! docker exec -it barman sh -c 'barman recover pg1 '$2' /'$1'_data; exit $?;'; then
            func-err $FUNCNAME $LINENO  $1' Recovery Failure';
            return 1
    fi

    # Ownership now passed to postgres
    if ! change-pgdata-owner postgres $1; then return 1; fi
    echo 'done'
    return 0   
}

barman-pitr () {

    echo -n $PROGNAME': Point-In-Time Recovery to '$1' ... '

    if [ "$#" != 3 ]; then func-err $FUNCNAME $LINENO 'Incorrect parameter count'; fi

    # barman needs ownership of the pgdata area
    change-pgdata-owner barman $1 || return 1;

    # Tweak unix permissions
    change-pgdata-permissions $1 || return 1;

    # Do the recovery
    docker exec -it barman sh -c 'barman recover --target-time '$3' pg1 '$2' /'$1'_data 2>&1 >/dev/null; exit $?;' || return 1;

    # Ownership passed to postgres
    change-pgdata-owner postgres $1 || return 1;

    echo 'done'
    return 0
}

barman-reset () {
	docker exec -it barman sh -c 'barman receive-wal --reset pg1; exit $?;' &> /dev/null ||
        func-err $FUNCNAME $LINENO 'Failed to Reset Stream Replication'; return 1     

    return 0
}

container-exists () {
    docker inspect --format='{{.State.Running}}' $1 &> /dev/null;
    return $?
}

is-multi-environment () {
    if container-exists dev-pbx-interface && container-exists qa-pbx-interface; then return 0; fi
    if container-exists dev-pbx-interface && container-exists prod-pbx-interface; then return 0; fi
    if container-exists qa-pbx-interface && container-exists prod-pbx-interface; then return 0; fi
    return 1;
}

confirm-barman () {
    # Minimally barman must be running
    if [ ! docker inspect --format='{{.State.Running}}' barman &> /dev/null ]; then 
        func-err $FUNCNAME $LINENO 'barman GONE'
        return 1
    fi

    barman_running=$(docker inspect --format='{{.State.Running}}' barman)
    if [ "$barman_running" == "false" ]; then 
        func-err $FUNCNAME $LINENO 'barman Not Running'
        return 1;
    fi

    return 0
}

pull-tcs-image () {
    echo -n $PROGNAME': Ensure tcs-image is current ... '
    if ! docker pull ccbcadmin/tcs-image$TCS_VERSION; then
        return 1
    else
        echo done
    fi
}

pull-tcs-jenkins () {
    echo -n $PROGNAME': Ensure tcs-jenkins is current ... '
    if ! docker pull ccbcadmin/tcs-jenkins$TCS_VERSION 2>&1 >/dev/null; then 
        return 1
    else
        echo done
    fi
    return 0
}

remove-stores-container () {
	# If there is no such container, then nothing to do
    if container-exists $1; then
        echo -n $PROGNAME': Removing Container '$1' ... '
        docker stop --time 10 $1 2>&1 >/dev/null
	    docker-compose $STORES_COMPOSE_ARGS rm -f -v $1 &> /dev/null
        echo 'done'
    fi
    return 0
}

start-stores-container () {
    echo -n $PROGNAME': Starting '$1' ... '

    if ! docker-compose $STORES_COMPOSE_ARGS up -d $1 &> /dev/null; then
        return 1
    fi

    if enable-restart $1; then echo 'done'; return 0; else return 1; fi
}

start-barman () {

    if ! container-exists barman; then

        # Barman must own its home area
        if ! docker-compose $STORES_COMPOSE_ARGS run --rm --entrypoint bash barman -c \
            'chown -R barman.barman /var/lib/barman &>/dev/null; exit $?;'; then 
            func-err $FUNCNAME $LINENO 'Failed to config barman ownership';
            return 1
        fi

        if ! start-stores-container barman; then
            func-err $FUNCNAME $LINE 'Failed to Start barman';
        fi
    fi
    return 0
}

start-pg1 () {

    if ! container-exists pg1; then

        # Ensure Postgres owns everything
        if ! change-pgdata-owner postgres pg1; then return 1; fi

        # Now start the incoming Postgres container
        if ! start-stores-container pg1; then func-err 'Failed to Start Container pg1'; fi

        sleep 5; # Allow for creation of new database
        
        if ! enable-barman-backups pg1; then return 1; fi

    fi
    return 0;
}

start-jenkins () {

    if ! container-exists jenkins && [ $TCSENV == 'qa' ]; then
        if ! pull-tcs-jenkins; then return 1; fi;
	    if ! start-stores-container jenkins; then return 1; fi
    fi
    return 0;
}

start-rabbitmq () {
    
    if ! container-exists rabbitmq; then
	    if ! start-stores-container rabbitmq; then
		    return 1;
	    fi
    fi
    return 0;
}

start-tcs () {
    docker-compose $COMPOSE_ARGS up -d --no-build pbx-interface || func-err $FUNCNAME $LINENO 'Failed to Start TCS Containers'; return 1
    return 0
}

validate-pg-selection () {
    if [ "$1" != 'pg1' ] && [ "$1" != 'pg2' ]; then
        # $2 is the $USAGE
        error-exit "$2"
    fi
}

validate-backup_id () {
    if [ $# != 1 ]; then func-err $FUNCNAME $LINENO 'Incorrect parameter count'; return 1; fi

    docker exec -it barman sh -c 'barman list-backup --minimal pg1 | grep -w '$1'; exit $?;' &> /dev/null || \
        func-err $FUNCNAME $LINENO 'Unknown '$1' backup_id '$2; return 1;
    return 0
}

mangle () 
{
    if [ -z ${TCS_VERSION+x} ]; then echo "TCS_VERSION undefined"; return 1; fi

    docker pull ccbcadmin/tcs-image$TCS_VERSION >> /dev/null || return 1;
       
    docker-compose $COMPOSE_ARGS run --rm --name $TCSENV'-mangle' -e SOURCE_DIRECTORY="$1" -e TARGET_DIRECTORY="$2" mangle || return 1;
    return 0
}

pbx-simulator ()
{
    if [ -z ${TCS_VERSION+x} ]; then echo "TCS_VERSION undefined"; return 1; fi

    docker pull ccbcadmin/tcs-image$TCS_VERSION >> /dev/null || return 1;
    docker-compose $COMPOSE_ARGS run -d --name $TCSENV'-pbx-simulator' -e SOURCE_DIRECTORY="$1" pbx-simulator || return 1;
    return 0
}

tms-simulator ()
{
    if [ -z ${TCS_VERSION+x} ]; then echo "TCS_VERSION undefined"; return 1; fi

    docker pull ccbcadmin/tcs-image$TCS_VERSION >> /dev/null || return 1;
    docker-compose $COMPOSE_ARGS run -d --name $TCSENV'-tms-simulator' tms-simulator || return 1;
    return 0
}

# Move a git tag
tag-mv () {
    tag-rm $1 || return 1;
    tag-add $1 || return 1;
    return 0
}

tag-add () {
    git tag $1 || return 1;
    git push origin $1 | return 1;
    return 0
}

tag-rm () {
    git tag -d $1 || return 1;
    git push origin :refs/tags/$1 || return 1;
    return 0
}