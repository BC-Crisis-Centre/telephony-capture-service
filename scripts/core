#!/bin/bash

PROGNAME=$(basename $0)
USAGE='Usage: '$PROGNAME' -v|--version|pg1|pg2'
source ./scripts/bash-functions

on-exit () {
	sleep 2
	pg-status
}
trap on-exit EXIT;

# ensure input params validity
if [ "$#" != 1 ]; then error-exit "$USAGE"; fi

if [ "$1" == '--version' ] || [ "$1" == '-v' ]; then
	echo 'TCS Version'$TCS_VERSION
	exit 0
fi

validate-pg-selection $1 "$USAGE"

# 5432 is the ACTIVE port, 5433 is STANDBY
set-pg-ports $1
source ./.tcs-pg-ports

COMPOSE_ARGS=" -f docker-compose-core.yml -p CORE "

# Ensure we have the correct image and, if not, go get it
if [ -z ${TCS_VERSION+x} ]; then echo "TCS_VERSION undefined"; exit 1; fi
if ! docker pull ccbcadmin/tcs-image$TCS_VERSION; then exit 1; fi

# Start the selected Postgres container
if ! container-exists $1; then
	if ! start-pg-container $1; then 
		error-exit 'Failed to Start Container '$1; 
	else
		msg $1' Container Started'
	fi
fi

sleep 7 # wait for some time - covers the building of a new database

if ! enable-stream-replication $1; then exit 1; else msg $1' Stream Replication Enabled'; fi

# Start RabbitMQ
if ! container-exists rabbitmq; then
	docker-compose $COMPOSE_ARGS up -d --no-build rabbitmq
	if [ $? != 0 ]; then error-exit 'Failed to Start Container RabbitMQ'; fi
fi

# Start jenkins
if ! container-exists jenkins; then
	docker-compose $COMPOSE_ARGS up -d jenkins
	if [ $? != 0 ]; then error-exit 'Failed to Start Container jenkins'; fi
fi

if ! start-barman; then error-exit 'barman Failure'; fi
