#!/bin/bash

PROGNAME=$(basename $0)
source ./scripts/bash-functions
USAGE='Usage: jenkins dev|qa [trace]'
NO_TRACE='&> /dev/null'

# 'execute-test-case' is the workhorse function to execute the various test cases
execute-test-case () {
	echo -n 'Test Case: '$1' ... '
	if docker-compose $COMPOSE_ARGS run --rm --name $TCSENV-$1 --entrypoint bash integrate -c \
		'./lib/integrate/'$1'.js '"$NO_TRACE"'; exit $?' ; then
		echo 'passed'
	else
		echo 'failed'
		echo 'Testing Aborted'
		exit 1
	fi
}

cleanup () {
	echo "Jenkins Cleanup"
	# Ensure the test environment is shutdown
	# docker-compose $COMPOSE_ARGS down 
}

trap cleanup EXIT

# Allow access to bash scripts
export PATH=./scripts:$PATH

# define some useful functions
source scripts/bash-functions

# This script can only be run in the dev or qa environments
if [ $# != 1 ] && [ $# != 2 ]; then error-exit "$USAGE"; fi
if [ $1 != 'dev' ] && [ $1 != 'qa' ] && [ $1 != 'prod' ; then error-exit "$USAGE"; fi
if [ $# == 2 ]; then
	if [ $2 == 'trace' ]; then
		unset NO_TRACE 
	else
		error-exit "$USAGE";
	fi
fi

# Config for the selected operating environment
$1

# Note what version is being tested
source ./.tcs.version
echo 'TCS_VERSION: '$TCS_VERSION

# Restart the TCS containers

docker-compose $COMPOSE_ARGS down 
docker-compose $COMPOSE_ARGS up -d --no-build --no-deps pbx-interface 
docker-compose $COMPOSE_ARGS up -d --no-build --no-deps database-interface 
docker-compose $COMPOSE_ARGS up -d --no-build --no-deps tms-interface 

sleep 3 # Wait for the startup to settle

# Execute the following several times
for i in 1
do

	# TEST CASE DESCRIPTION 
	# Send a stream of data, shutdown rabbitmq, then restart it.
	execute-test-case test-smdr-capture-accuracy

exit 0

	# TEST CASE DESCRIPTION 
	# Send a file of SMDR messages through the TCS and ensure that a
	# copy of the file is safely recorded in the SMDR_DATA-001 directory.
	execute-test-case test-recording-smdr-files


	# TEST CASE DESCRIPTION 
	# Send a file of SMDR messages through the TCS and ensure 
	# that the database has recorded all records in the SMDR table.
	execute-test-case test-smdr-capture


	# TEST CASE DESCRIPTION 
	# Send a stream of data, shutdown rabbitmq, then restart it.
	execute-test-case test-rabbit-interruption-part1

	# Allow time for all data to be absorbed into RabbitMQ
	sleep 10 

	# Now restart the RabbitMQ container
	remove-stores-container rabbitmq || exit 1;
	start-stores-container rabbitmq || exit 1;

	# TEST CASE DESCRIPTION 
	# After the restart of RabbitMQ, all expected data from part1 should be received.
	execute-test-case test-rabbit-interruption-part2


	# TEST CASE DESCRIPTION 
	# Ensure that a stream of data makes it round-trip.
	# input_testdata=>pbx-interface=>rabbitmq=>tms-interface=>output_testdata
	# input_testdata and output_testdata must be identical
	execute-test-case test-pbx-to-tms-flow


	# TEST CASE DESCRIPTION 
	# Send a stream of data, shutdown the queue without acking last
	# message, and then restart the queue - ensure no messages are lost.
	execute-test-case test-queuing-no-ack


	# TEST CASE DESCRIPTION 
	# Test the link to the tms-interface to ensure that it recovers and 
	# that that there is no data loss.
	execute-test-case test-pbx-link-reopening	


	# TEST CASE DESCRIPTION 
	# Test the link to the tms-interface to ensure that it recovers and 
	# ensuring no data loss.
	execute-test-case test-tms-link-reopening		

done

echo 'All Test Cases executed successfully'
exit 0
