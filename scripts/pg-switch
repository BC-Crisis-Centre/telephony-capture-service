#!/bin/bash

PROGNAME=$(basename $0)

source ./scripts/bash-functions

postgres-rollback () {

	# If neither pg container is running, then try to bring the original back to life
	pg-statuses

	if [ -z "$ACTIVE_PG" ]; then
		# Attempt to start the container that was originally supporting the mission
		start-pg-container $FROM_PG 5432
		if [ $? != 0 ]; then
			msg 'Unable to restart the original container'; 
			msg 'WARNING: TCS is partially disabled';
			exit
		else
			# Check that the container is up and running
			sleep 2; pg_running=$(docker inspect --format='{{.State.Running}}' $FROM_PG)
			if [ pg_running != "true" ]; then
				msg 'WARNING: TCS is partially disabled'
				exit
			fi
			# When the container is back up, ensure stream replication is enabled
			sleep 2;
			enable-stream-replication $FROM_PG		
		fi
	fi

	start-container database-interface
}

trap postgres-rollback EXIT;

# Load ACTIVE_PG and PITR_PG with the following
pg-statuses

FROM_PG=$ACTIVE_PG
TO_PG=$PITR_PG
msg 'Begin Postgres Container Switch from '$FROM_PG' to '$TO_PG;

# Stop the inflow to the database
stop-container database-interface

# Ensure the target container is quiet
remove-container $TO_PG

# Do a final backup
docker exec -it barman sh -c 'barman backup '$FROM_PG' 2>&1 >/dev/null; exit $?;'
if [ $? != 0 ]; then error-exit $FROM_PG' Final Backup Failed'; else msg $FROM_PG' Final Backup Successful'; fi

# Shutdown the outgoing container
remove-container $FROM_PG

barman-recover-latest $FROM_PG $TO_PG

# Now start the incoming database container
start-pg-container $TO_PG 5432; sleep 5;

# Ensure stream replication is enabled
enable-stream-replication $TO_PG 5432;

msg 'Postgres Container Switch Successful'
exit 0
