#!/bin/bash

PROGNAME=$(basename $0)

source ./scripts/bash-functions

postgres-rollback () {

	return 0
	
	# If neither pg container is running, then try to bring the original back to life
	pg-status &> /dev/null

	if [ -z "$ACTIVE_PG" ]; then

		msg 'Switch Failed - Rolling Back to '$FROM_PG;

		# Remove the pg container whose startup failed
		remove-core-container $TO_PG

		# Adjust the ports back to what they were
		set-pg-ports $FROM_PG
		source ./.tcs-pg-ports

		# Now start the incoming Postgres container
		if ! start-core-container $FROM_PG; then
			msg 'Unable to restart the original container'; 
			msg 'WARNING: TCS is partially disabled';
			exit 1
		else
			msg $FROM_PG' Container Started'
		fi
		
		if ! alter-archive-command $FROM_PG; then 
			msg 'WARNING: TCS is partially disabled';
			exit 1
		fi

	fi

	if enable-barman-backups; then
		msg 'Barman Backups Enabled';
	else
		error-exit 'Failed to Enable Barman Backups'
	fi

	pg-status
}

# Load $ACTIVE_PG and $STANDBY_PG with the following
pg-status &> /dev/null

FROM_PG=$ACTIVE_PG
TO_PG=$STANDBY_PG

if [ -z ${ACTIVE_PG+x} ]; then error-exit 'No Active Postgres Container'; fi

msg 'Begin Postgres Container Switch from '$FROM_PG' to '$TO_PG;

# Do a final backup
echo -n $PROGNAME': Final '$FROM_PG' Backup ... '
if docker exec -it barman sh -c 'barman backup '$FROM_PG' 2>&1 >/dev/null; exit $?;'; then
	echo 'done';
else
	# Abort if a final backup is not possible
	error-exit $FROM_PG' Final Backup Failed';
fi

# Ensure the target container is quiet
remove-core-container $TO_PG

# Arrange for a possible rollback
trap postgres-rollback EXIT;

# Shutdown the outgoing container
remove-core-container $FROM_PG

if ! barman-recover-latest $FROM_PG $TO_PG; then error-exit 'Failed Database Recovery'; fi

if ! start-pg-container $TO_PG; then exit 1; fi

# No need for a cleanup
trap '' EXIT;

msg 'Postgres Container Switch Successful'
exit 0
