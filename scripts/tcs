#!/bin/bash

PROGNAME=$(basename $0)
source ./scripts/bash-functions

USAGE='Usage: tcs [down] [dev|qa|prod]';

if [ "$#" != 0 ] && [ "$#" != 1 ] && [ $# != 2 ]; then error-exit "$USAGE"; fi

# ensure input params validity
if [ "$#" == 1 ]; then 
	case "$1" in
		[d][o][w][n])
			docker-compose $COMPOSE_ARGS down --remove-orphans &> /dev/null
			msg 'TCS ('$TCSENV') Down'
			exit 0
			;;
		[d][e][v])
			TCSENV=dev
			COMPOSE_ARGS=$DEV_COMPOSE_ARGS
			;;
		[q][a])
			TCSENV=qa
			COMPOSE_ARGS=$QA_COMPOSE_ARGS
			;;
		[p][r][o][d])
			TCSENV=prod
			COMPOSE_ARGS=$PROD_COMPOSE_ARGS
			;;
		*)
			error-exit "$USAGE";
	esac		
elif [ $# == 2 ]; then
	case "$2" in
		[d][e][v])
			TCSENV=dev
			COMPOSE_ARGS=$DEV_COMPOSE_ARGS
			;;
		[q][a])
			TCSENV=qa
			COMPOSE_ARGS=$QA_COMPOSE_ARGS
			;;
		[p][r][o][d])
			TCSENV=prod
			COMPOSE_ARGS=$PROD_COMPOSE_ARGS
			;;
		*)
			error-exit "$USAGE";
	esac	
	if [ $1 != 'down' ]; then 
		error-exit "$USAGE"; 
	else 
		docker-compose $COMPOSE_ARGS down --remove-orphans &> /dev/null
		msg 'TCS ('$TCSENV') Down'
		exit 0; 
	fi
fi	

if [ $TCSENV != 'dev' ]; then
	echo -n $PROGNAME:' Ensure the correct docker image is available ... '
	if [ -z ${TCS_VERSION+x} ]; then echo "TCS_VERSION undefined"; exit 1; fi
	if ! docker pull ccbcadmin/tcs-image$TCS_VERSION 2>&1 >/dev/null; then exit 1; fi
	echo done
fi

# Start the TCS containers
docker-compose $COMPOSE_ARGS up -d --no-build pbx-interface
if [ $? != 0 ]; then error-exit 'Failed to Start TCS Containers'; fi

msg 'TCS ('$TCSENV') Up, Version'$TCS_VERSION
exit 0
